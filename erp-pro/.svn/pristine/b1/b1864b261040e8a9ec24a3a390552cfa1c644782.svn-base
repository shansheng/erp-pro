/**
 * Copyright &copy; 2015-2020 <a href="http://www.pt.org/">pt</a> All rights reserved.
 */
package com.pt.modules.sys.sysmarket.service;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.pt.common.utils.StringUtils;
import com.pt.core.persistence.Page;
import com.pt.core.service.CrudService;
import com.pt.modules.sys.entity.Role;
import com.pt.modules.sys.mapper.RoleMapper;
import com.pt.modules.sys.sysmarket.dto.SysmarketDTO;
import com.pt.modules.sys.sysmarket.dto.SysmarketStateDTO;
import com.pt.modules.sys.sysmarket.entity.SysMarket;
import com.pt.modules.sys.sysmarket.entity.SysMarketList;
import com.pt.modules.sys.sysmarket.entity.SysMarketOfMap;
import com.pt.modules.sys.sysmarket.mapper.SysMarketListMapper;
import com.pt.modules.sys.sysmarket.mapper.SysMarketMapper;
import com.pt.modules.sys.utils.UserUtils;


/**
 * 销售管理Service
 * @author 郑利
 * @version 2018-08-23
 */
@Service
@Transactional(readOnly = true)
public class SysMarketService extends CrudService<SysMarketMapper, SysMarket> {
	@Autowired
	private SqlSessionFactory sqlSessionFactory;
	
	@Autowired
	private RoleMapper roleMapper;
@Autowired
private SysMarketListMapper sysMarketListMapper;

@Autowired
private SysMarketMapper sysMarketMapper;
	public SysMarket get(String id) {
		
		SysMarket sysMarket = super.get(id);
		sysMarket.setSysMarketListList(sysMarketListMapper.findList(new SysMarketList(sysMarket)));

		return sysMarket;
	}
	
	public List<SysMarket> findList(SysMarket sysMarket) {
		return super.findList(sysMarket);
	}
	public List<Role> findList(Role role) {
		return roleMapper.findList(role);
	}
	public Page<SysMarket> findPage(Page<SysMarket> page, SysMarket sysMarket) {
		return super.findPage(page, sysMarket);
	}
	
	@Transactional(readOnly = false)
	public void save(SysMarket sysMarket) {
		super.save(sysMarket);
		for (SysMarketList sysMarketList : sysMarket.getSysMarketListList()){
			if (sysMarketList.getId() == null){
				continue;
			}
			
			if (SysMarketList.DEL_FLAG_NORMAL.equals(sysMarketList.getDelFlag())){
				if (StringUtils.isBlank(sysMarketList.getId())){
					sysMarketList.setSysMarketId(sysMarket.getId());
					
					sysMarketList.preInsert();
					sysMarketListMapper.insert(sysMarketList);
				}else{
					sysMarketList.preUpdate();
					sysMarketListMapper.update(sysMarketList);
				}
			}else{
				sysMarketListMapper.delete(sysMarketList);
			}
			
		}
	}
	@Transactional(readOnly = false)
	public Map<String, Object> getBillNo(SysMarket sysMarket) {
		
		SqlSession sqlSession = sqlSessionFactory.openSession();  
		String statement = "com.pt.modules.sys.sysMarket.mapper.SysMarketMapper.getBillNo";
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        parameterMap.put("i_auto_code", "wms_inv_in_bill_no");
        parameterMap.put("i_prefix", "");
        parameterMap.put("i_postfix", "");
        parameterMap.put("i_Sys_User_Id", UserUtils.getUser().getId());
        parameterMap.put("o_return_code", "");
        sqlSession.selectOne(statement, parameterMap);
        sqlSession.close();
        return parameterMap;
	}
	@Transactional(readOnly = false)
	public void delete(SysMarket sysMarket) {
		super.delete(sysMarket);
		sysMarketListMapper.delete(new SysMarketList(sysMarket));
	}

	/**
	 * @param contractNo
	 * @return
	 */
	public String checkNo(String contractNo) {
	
		return mapper.checkNo(contractNo);
	}
	
	/**
	 * 查询各个地区的销售订单的统计
	 * @return
	 */
	public List<List<SysMarketOfMap>> getOfMap() {
		List<SysMarketOfMap> data = mapper.getOfMap();
		List<List<SysMarketOfMap>> list = new ArrayList<List<SysMarketOfMap>>();
		for (SysMarketOfMap sysMarketOfMap : data) {
			List<SysMarketOfMap> son = new ArrayList<SysMarketOfMap>();
			if(StringUtils.isNotBlank(sysMarketOfMap.getName())){
				son.add(new SysMarketOfMap("太原"));
				son.add(sysMarketOfMap);
				list.add(son);
			}
		}
		return list;
	}
	public LinkedHashMap<String,Object> getNumberByDate() {
	    return getNumber();
		  
	}
	private LinkedHashMap<String,Object> getNumber() {
		  int year = Calendar.getInstance().get(Calendar.YEAR);
		  String nowYear = String.valueOf(year);
		  int count = sysMarketMapper.getNumberByDate(nowYear);
		  String beforeYear = String.valueOf(year - 1);;
		  int count1 = sysMarketMapper.getNumberByDate(beforeYear);
		  List<Object> list = null;
		  LinkedHashMap<String, Object> body = new LinkedHashMap<String, Object>();
		  if ( count >0 && count1 > 0) {
			  list = new ArrayList<>();
			  SysmarketDTO s = new SysmarketDTO(nowYear,count);
			  SysmarketDTO sd = new SysmarketDTO(beforeYear,count1);
			  list.add(s);
			  list.add(sd);
		  }
		  body.put("data", list);
		  return body;
	}
	public LinkedHashMap<String,Object> getSysmarketState() {
		String[] monthStr = {"1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"};
		String[] numStr = {"0","0","0","0","0","0","0","0","0","0","0","0"};
		  List<SysmarketStateDTO> list = sysMarketMapper.getMonthNum();
		  SysmarketStateDTO sys =  null;
		  LinkedHashMap<String,Object> body = null;
		  if (list != null) {
			  String month = null;
			  String num = null;
			  for (SysmarketStateDTO s : list) {
				  month = s.getMonth() + "月";
				  for (int i = 0; i < monthStr.length; i++) {
					  if (month.equals(monthStr[i])) {
						  monthStr[i] = month;
						  numStr[i] = s.getNum();
					  }
				  }
				 
			  }
			  sys =  new SysmarketStateDTO();
			  body = new LinkedHashMap<String,Object>();
			  sys.setMonth(strConvert(monthStr));
			  sys.setNum(strConvert(numStr));
			  body = new LinkedHashMap<String,Object>();
			  body.put("data", sys);
		  }
		   return body;
		  
	}
	private String strConvert(String[] arr){
		StringBuilder b= new StringBuilder();
		for(int i = 0; i < arr.length; i++){
			b.append(arr[i]+",");
		}
		b.deleteCharAt(b.length()-1);
		return b.toString();
	}
	
}